scalar UUID

type User {
  id: UUID!
  username: String!
  email: String!
}

type AuthPayload {
  token: String!
  user: User!
}

input LoginInput {
  email: String!
  password: String!
}

input RegisterInput {
  email: String!
  username: String!
  password: String!
}

type Query {
  me: User
  users: [User!]!
  user(id: UUID!): User
}

type Mutation {
  login(input: LoginInput!): AuthPayload!
  register(input: RegisterInput!): AuthPayload!
}